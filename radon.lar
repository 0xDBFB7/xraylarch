# wxlarch history saved Mon Jul 29 10:24:22 2013
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
.rois
a.rois
a.rois[5]
a.rois[4]
a.rois[3]
e_mn = a.energy[a.rois[3].left:a.rois[3].right]
e_mn
d_mn = a.data[a.rois[3].left:a.rois[3].right]
d_mn = log10(a.data[a.rois[3].left:a.rois[3].right])
d_mn = a.data[a.rois[3].left:a.rois[3].right]
_sys.wx
show(_sys.wx)
get_display
get_display()
plot(a.energy, a.data)
plot(a.energy, a.data, ylog_scale=True)
newplot(a.energy, a.data, ylog_scale=True)
_sys.wx
show _sys.wx
show _plotter
_plotter.plot1.panel
dir(_plotter.plot1.panel)
_plotter.plot1.panel.axes
_plotter.plot1.panel.axes.histogram
_plotter.plot1.panel.axes.barh
_plotter.plot1.panel.axes.hist
help(_plotter.plot1.panel.axes.hist)
len(e_mn)
_plotter.plot1.panel.axes.hist(e_mn, d_mn)
e_mn
_plotter.plot1.panel.axes.hist(e_mn, bins=len(d_mn), weights=d_mn)
_plotter.plot1.panel.axes.Refresh()
_plotter.plot1.panel.axes.draw()
_plotter.plot1.panel.axes.show()
_plotter.plot1.panel.Refresh()
newplot(a.energy, a.data, ylog_scale=True)
_plotter.plot1.panel.axes.fill(e_mn, d_mn, 'g')
newplot(a.energy, a.data, ylog_scale=True)
_plotter.plot1.panel.axes.fill_between(e_mn, d_mn, '#DDDDDD')
_plotter.plot1.panel.axes.fill_between(e_mn, d_mn, color='#DDDDDD')
e_mn
d_mn[0]
d_mn[0]  = 0
d_mn
d_mn[-1]  = 0
_plotter.plot1.panel.axes.fill_between(e_mn, d_mn, color='#DDDDAA')
d_mn[-1]  = 1
d_mn[0]  = 0
d_mn[0]  = 1
_plotter.plot1.panel.axes.fill_between(e_mn, d_mn, color='#DDDDAA')
e_mn
d_mn
d_mn = a.data[a.rois[3].left:a.rois[3].right]
d_mn
a.data[:]
a.data[a.rois[3].left:a.rois[3].right]
a.data[a.rois[3].left-1:a.rois[3].right-1]
_plotter.plot1.panel.axes.fill_between(e_mn, d_mn, color='#AADAA')
_plotter.plot1.panel.axes.fill_between(e_mn, d_mn, color='#ADADAA')
None
o = _plotter.plot1.panel.axes.fill_between(e_mn, d_mn, color='#ADADAA')
o
dir(o)
o is not None
o.remove()
o = _plotter.plot1.panel.axes.fill_between([3,4], [1000, 2000], color='#ADADAA')
o.remove()
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
p  = array([a.energy, a.data]).transpose().reshape(-1, 1, 2)
p
p.shape
segments =  concatenate(points[:-1], points[1:], axis=1)
segments =  concatenate(p[:-1], p[1:], axis=1)
segments =  np.concatenate(p[:-1], p[1:], axis=1)
import np
import numpy as np
segments =  np.concatenate(p[:-1], p[1:], axis=1)
segments =  np.concatenate([p[:-1], p[1:]], axis=1)
segments
segments.shape
from matplotlib.colors import ListedColorMap
import matplotlib
from matplotlib.colors import ListedColorMap
from matplotlib.colors import ListedColormap
cmap = ListedColormap(['b', 'r'])
cmap
lc
from matplotlib.collections = LineCollection
from matplotlib.collections import LineCollection
lc   = LineCollection(segments, cmap=cmap)
lc.set_array(a.data)
plot(a.energy, a.data)
_plotter.plot1.gca().add_collection(lc)
_plotter.plot1.axes.add_collection(lc)
_plotter.plot1.panel.axes.add_collection(lc)
_plotter.plot1.panel.Refresh()
plot(a.energy, a.data)
quit
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
xrf_plot(a.energy, a.counts, mca=a)
ma
run 'A.lar'
c1
run 'A.lar'
help(ma.masked_where)
help(ma.masked_less)
run 'A.lar'
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.data, mca=a)
xrf_plot(a.energy, a.counts, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.counts, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.counts, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.counts, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.counts, mca=a)
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.counts, mca=a)
ma.masked_less_equal
a = read_gsemca('srm1832.mca')
xrf_plot(a.energy, a.counts, mca=a)
import mapviewer
a = ls('..')
a
a[1]
xrm
show(_i0)
show(_io)
a = read_xrfmap('250x500map_well1_12m_map1.004.h5')
a = read_xrfmap('..\250x500map_well1_12m_map1.004.h5')
a = read_xrfmap('../250x500map_well1_12m_map1.004.h5')
a
mca = a.get_mca_area('area_001')
mca
xrfdisplay(mca=mca)
xrf_plot(mca=mca)
xrf_plot(mca.energy, mca.counts, mca=mca)
mca
mca.rois
mca.rois[4]
mca.rois[3]
mca.rois[3].get_counts()
mca.rois[3].get_counts(mca.data)
mca.rois[3].get_counts(mca.counts)
mca.rois[3].get_counts(mca.counts, net=True)
mca.rois[3]
d = mca.count[356:384]
d = mca.counts[356:384]
len(d)
bgr = contatenate(mca.counts[353:356], mca.counts[384:388]).mean()
bgr = concatenate(mca.counts[353:356], mca.counts[384:388]).mean()
bgr = concatenate((mca.counts[353:356], mca.counts[384:388])).mean()
bgr
len(d)
d.sum() - bgr*len(d)
384-356
len(d)
exit
quit
show(_io)
a = read_gsemca('a3.mca')
xrf_plot(a.energy, a.counts, mca=a)
s = read_gsemca('srm1832.mca')
plot(a.energy, a.counts)
oplot(s.energy, s.counts)
plot(a.energy, a.counts)
newplot(s.energy, s.counts)
plot(a.energy, a.counts, zorder=-30)
s = read_gsemca('srm1832.mca')
a = read_gsemca('a3.mca')
plot(a.energy, a.counts)
a = read_gsemca('a3.mca')
plot(a.energy, a.counts)
a = read_gsemca('a3.mca')
plot(a.energy, a.counts)
s = read_gsemca('srm1832.mca')
plot(a.energy, a.counts, zorder=-1)
plot(s.energy, s.counts, zorder=-1)
s = read_gsemca('srm1832.mca')
a = read_gsemca('a3.mca')
plot(a.energy, a.counts)
plot(s.energy, s.counts, zorder=-3)
newplot(a.energy, a.counts, zorder=20)
plot(s.energy, s.counts, zorder=3)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a.energy
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
a = read_gsemca('a3.mca')
xrf_plot(a)
f = gse_escan('Fike/s_xafs_fes2.001')
f = read_gsescan('Fike/s_xafs_fes2.001')
f = read_gsescan('Fike/s_xafs_fes2.002')
show f
f.pos
f.pos.shape
f.pos[0]
f.sum
f.sum_raw
f.sums_raw.shape
show(f)
ska = f.sums[3,:]
i0 = f.sums[1,:]
en = f.pos[0,:]
newplot(en, ska/i0)
newplot(en, i0)
run show_sulfur.lar
ls('.')
run 'Show_sulfur.lar'
ls('Fike')
splot('Fike/s_xafs_fes2.003')
splot('Fike/s_xafs_fes2.004')
splot('Fike/s_xafs_fes2.005')
splot('Fike/s_xafs_fes2.006')
splot('Fike/s_xafs_fes2.007')
splot('Fike/s_xanes_YWT2\ Vein.003')
splot('Fike/s_xanes_YWT2 Vein.003')
sleep
sleep(0.2)
sleep(0.25)
sleep(1.25)
run 'Show_sulfur.lar'
f = read_gsescan('Fike/s_xanes_YWT2 Vein2.001')
try: f = read_gsescan('Fike/s_xanes_YWT2 Vein2.001')
try:
endtry
try:
endtry
try:
 f  = read_gsescan('Fike/s_xanes_YWT2 Vein2.001')
except:
   print 'An Error!'
endtry
f
dir(f)
f = None
try:
 f  = read_gsescan('Fike/s_xanes_YWT2 Vein2.001')
except:
   print 'An Error!'
endtry
f
x = f.pos[0,:]
f.pos
 f  = read_gsescan('Fike/s_xanes_YWT2 Vein2.001')
try:
 f  = read_gsescan('Fike/s_xanes_YWT2 Vein2.001')
except:
 print 'Error'
endtry
run 'Show_sulfur.lar'
show(_plot)
show(_plotter)
run 'Show_sulfur.lar'
all
run 'Show_sulfur.lar'
all
all[0]
newplot(all[0].en, all[0].xmuf)
newplot(all[0].energy, all[0].xmuf)
all[0].energy
run 'Show_sulfur.lar'
newplot(all[0].energy, all[0].xmu)
newplot(all[0].energy, all[0].xmu/1,2)
newplot(all[0].energy, all[0].xmu/1.2)
newplot(all[0].energy, all[0].xmu/1.1)
newplot(all[0].energy, all[0].xmu/1.2)
 plot(all[1].energy, all[1].xmu/1.1)
newplot(all[1].energy, all[1].xmu)
newplot(all[1].energy, all[1].xmu*200)
newplot(all[1].energy, all[1].xmu*400)
newplot(all[1].energy, all[1].xmu*400 - 0.003)
newplot(all[1].energy, all[1].xmu*400 - 0.05)
newplot(all[1].energy, all[1].xmu*400 - 0.1)
newplot(all[1].energy, all[1].xmu*800 - 0.1)
newplot(all[1].energy, all[1].xmu*600 - 0.1)
  plot(all[0].energy, all[0].xmu/1.2)
newplot(all[2].energy, all[2].xmu*400)
newplot(all[2].energy, all[2].xmu*50)
  plot(all[0].energy, all[0].xmu/1.2)
   plot(all[1].energy, all[1].xmu*600 - 0.1)
   plot(all[1].energy, all[1].xmu*6 - 0.1)
   plot(all[1].energy, all[1].xmu*6 )
   plot(all[1].energy, all[1].xmu*60 )
   plot(all[1].energy, all[1].xmu*120 )
newplot(all[2].energy, all[2].xmu*400)
  plot(all[0].energy, all[0].xmu/1.2)
newplot(all[2].energy, all[2].xmu*50)
  plot(all[0].energy, all[0].xmu/1.2)
newplot(all[2].energy, all[2].xmu*50)
  plot(all[0].energy, all[0].xmu/1.2)
   plot(all[1].energy, all[1].xmu*120 )
  newplot(all[0].energy, all[0].xmu/1.2)
   plot(all[1].energy, all[1].xmu*120 )
newplot(all[2].energy, 0.25+all[2].xmu*50)
   plot(all[1].energy, all[1].xmu*120 )
newplot(all[1].energy, all[1].xmu*120 )
newplot(all[2].energy, 0.25+all[2].xmu*50)
newplot(all[1].energy, all[1].xmu*200 )
 plot(all[2].energy, all[2].xmu*50)
  newplot(all[0].energy, all[0].xmu/1.)
newplot(all[1].energy, all[1].xmu*200 )
 plot(all[2].energy, all[2].xmu*50)
  plot(all[0].energy, all[0].xmu/1.)
run 'Show_sulfur.lar'
quit
run 'fit_rcurve.lar'
p, d = fit_scan('rock111.006')
p100, d100 = fit_scan('rock111.006')
p100, d100 = fit_scan('rock111.007')
p100, d100 = fit_scan('rock111.009')
p100, d100 = fit_scan('rock111.010')
p100, d100 = fit_scan('rock111.009')
p130, d130 = fit_scan('rock111.030')
p130, d130 = fit_scan('rock111.033')
p140, d140 = fit_scan('rock111.038')
run 'fit_rcurve.lar'
fitall()
run 'fit_rcurve.lar'
fitall()
run 'fit_rcurve.lar'
fitall()
run 'sigma_current111.lar'
fit_scan('rock111.014')
fit_scan('rock111.019')
run 'sigma_current111.lar'
fit_scan('rock111.008')
run 'sigma_current111.lar'
run 'sigma_current.lar'
run 'sigma_current111.lar'
run 'sigma_current.lar'
x = linspace(0, 10, 101)
plot(x, sin(x))
newplot(x, sin(x))
plot(x, sin(x))
run 'fit_rcurve.lar'
fit_scan('rock111.008')
fit_scan('rock111.006')
run 'fit_rcurve.lar'
fit_scan('rock111.006')
p, d=fit_scan('rock111.006')
d.get_data'('d4')
)
]
')
d.get_data('d4').sum()
d.get_data('d46).sum()
')
d.get_data('d6').sum()
')
'
x = 20
)
]
)
x = 1
d.get_data('d6').sum()
d.get_data('d4').sum()
run 'fit_rcurve.lar'
p, d=fit_scan('rock111.006')
fitall()
run 'fit_rcurve.lar'
fitall()
p, d=fit_scan('rock111.010')
p, d=fit_scan('rock111.009')
plot(d.x, d.get_data('d4'))
plot(d.x, d.get_data('d6'))
p, d10=fit_scan('rock111.010')
p, d09=fit_scan('rock111.009')
d09.get_data('d6').max()
d09.get_data('d6').max()/d09.get_data('d2').mean()
run 'fit_rcurve.lar'
fitall()
run 'si111_1stharm.lar'
read_scan('rock111.010')
read_scan('rock111.013')
read_scan('rock111.015')
read_scan('rock111.019')
read_scan('rock111.020')
read_scan('rock111.021')
read_scan('rock111.022')
read_scan('rock111.042')
read_scan('rock111.039')
read_scan('rock111.035')
read_scan('rock111.034')
read_scan('rock111.031')
run 'si111_3rdharm.lar'
run 'si111_1stharm.lar'
run 'si111_3rdharm.lar'
run 'si111_1stharm.lar'
run 'si111_3rdharm.lar'
run 'si111_1stharm.lar'
run 'si111_3rdharm.lar'
run 'si111_1stharm.lar'
read_scan('rock311.001')
run 'si111_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
run 'si111_1stharm.lar'
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
run 'si311_1stharm.lar'
read_scan('rock311.001')
read_scan('rock311.002')
read_scan('rock311.001')
read_scan('rock311.004')
read_scan('rock311.005')
read_scan('rock311.002')
read_scan('rock311.003')
read_scan('rock311.006')
read_scan('rock311.007')
read_scan('rock311.011')
read_scan('rock311.010')
read_scan('rock311.009')
read_scan('rock311.008')
read_scan('rock311.010')
read_scan('rock311.012')
read_scan('rock311.013')
more ('si311_1stharm.lar')
read_scan('rock311.014')
read_scan('rock311.017')
read_scan('rock311.016')
read_scan('rock311.015')
read_scan('rock311.018')
read_scan('rock311.019')
read_scan('rock311.020')
read_scan('rock311.021')
read_scan('rock311.022')
read_scan('rock311.023')
read_scan('rock311.024')
read_scan('rock311.025')
read_scan('rock311.037')
read_scan('rock311.038')
read_scan('rock311.040')
read_scan('rock311.041')
read_scan('rock311.049')
read_scan('rock311.042')
read_scan('rock311.044')
read_scan('rock311.051')
read_scan('rock311.052')
read_scan('rock311.053')
read_scan('rock311.056')
read_scan('rock311.057')
read_scan('rock311.055')
read_scan('rock311.061')
read_scan('rock311.060')
run 'si311_1stharm.lar'
show()
show(dat)
dat.flat = dat.norm[:]
ie0
where(dat.energy == dat.e0)
where(dat.energy == dat.e0)[0]
where(dat.energy == dat.e0)[0][0]
dat.energy[100], dat.e0
ie0 = where(dat.energy == dat.e0)[0][0]
dat.flat[ie0:]  = dat.norm[ie0:] - dat.post_edge[ie0:] + dat.pre_edge[ie0:] + dat.edge_step
newplot(dat.energy, dat.norm)
plot(dat.energy, dat.flat)
dat.flat[ie0:]  = dat.norm[ie0:] - (dat.post_edge[ie0:] - dat.pre_edge[ie0:]) / dat.edge_step
plot(dat.energy, dat.flat)
dat.flat[ie0:]  = dat.norm[ie0:] + (dat.post_edge[ie0:] - dat.pre_edge[ie0:]) / dat.edge_step
plot(dat.energy, dat.flat)
dat.flat[ie0:]  = dat.mu[ie0:] + (dat.post_edge[ie0:] - dat.pre_edge[ie0:])
dat.flat[ie0:]  = dat.xmu[ie0:] + (dat.post_edge[ie0:] - dat.pre_edge[ie0:])
plot(dat.energy, dat.flat)
dat.flat[ie0:]  = dat.xmu[ie0:] - (dat.post_edge[ie0:] - dat.pre_edge[ie0:])
plot(dat.energy, dat.flat)
nweplot(dat.energy, dat.flat)
newplot(dat.energy, dat.flat)
dat.flat[ie0:]  = (dat.post_edge[ie0:] - dat.pre_edge[ie0:])
newplot(dat.energy, dat.flat)
dat.flat[:]  = (dat.post_edge[:] - dat.pre_edge[:])
newplot(dat.energy, dat.flat)
 plot(dat.energy, dat.norm)
newplot(dat.energy, dat.norm)
run  'pre_edge.lar'
newplot(dat.energy, dat.norm)
dat.flat  = (dat.post_edge - dat.pre_edge)
 plot(dat.energy, dat.flat)
dat.flat  = (dat.post_edge - dat.pre_edge)*edge_step
dat.flat  = (dat.post_edge - dat.pre_edge)*dat.edge_step
 plot(dat.energy, dat.flat)
show(dat)
dat.flat  = (dat.norm_c1*dat.energy + dat.norm_c2*dat.energy**2)
 plot(dat.energy, dat.flat)
 plot(dat.energy, dat.post_edge-dat.pre_edge)
newplot(dat.energy, dat.post_edge-dat.pre_edge)
newplot(dat.energy, dat.xmu-dat.pre_edge)
newplot(dat.energy, dat.xmu)
newplot(dat.energy, dat.xmu-dat.pre_edge)
newplot(dat.energy, dat.post_edge-dat.pre_edge)
plot(dat.energy, dat.xmu-dat.pre_edge)
dat.flat  = (dat.post_edge - dat.pre_edge)
plot(dat.energy, dat.flat)
dat.flat[ie0]
dat.flat = dat.flat - dat.flat[ie0]
plot(dat.energy, dat.flat)
dat.flat = dat.flat - dat.flat[ie0] + 1
plot(dat.energy, dat.flat)
plot(dat.energy, dat.norm-dat.flat)
run('p1.lar')
plot(dat.energy, dat.fflat, win=2)
dat.flat[ie0:].mean()
dat.norm[ie0:].mean()
dat.flat[ie0:].mean(), dat.norm[ie0:].mean()
dat.flat[ie0:].std(), dat.norm[ie0:].std()
run('p1.lar')
plot(dat.energy, dat.flat2, win=2)
plot(dat.energy, dat.tline)
plot(dat.energy, dat.fline)
plot(dat.energy[ie0:], dat.fline)
plot(dat.energy[ie0:], dat.fline, win=2)
newplot(dat.energy,  dat.norm)
 lot(dat.energy,  dat.fline)
 plot(dat.energy,  dat.fline)
 plot(dat.energy,  dat.fline-dat.fline[ie0])
 plot(dat.energy,  1+dat.fline-dat.fline[ie0])
 plot(dat.energy,  dat.norm/(1+dat.fline-dat.fline[ie0]))
 plot(dat.energy,  dat.norm- (1+dat.fline-dat.fline[ie0]))
 plot(dat.energy,  dat.norm- (dat.fline-dat.fline[ie0]))
newplot(dat.energy,  dat.norm)
newplot(dat.energy,  dat.flat)
 plot(dat.energy,  dat.norm- (dat.fline-dat.fline[ie0]))
 plot(dat.energy,  dat.fline)
run 'p1.lar'
run('dt_correct.lar')
from glob import glob
x = glob('../Y*')[0]
x
'..\\' in x
'
'..\\\' in x
'
'..\\\\' in x
'
'\' in x
'
'\\' in x
'
"\\" in x
"
"//" in x
r"\\" in x
"
r'\\'
'
r'\\  '
r'\\Y' in x
x
r'\Y' in x
'\\\Y' in x
'\\\\Y' in x
'\Y' in x
r'..\' in x
'
r'..\Y' in x
x.replace(r'..\Y', 'Y')
run('dt_correct.lar')
glob_correct('Y*Ce*.*', 'Ce La1')
sg = read_gsecan('../Y2.8Ce0.2Fe5012_CeXAFS.004')
sg = read_gsescan('../Y2.8Ce0.2Fe5012_CeXAFS.004')
sg = read_gsescan('../Y2.8Ce0.2Fe5O12_CeXAFS.004')
sg.sums_list[3]
array(sg.sums_list[3])
run('dt_correct.lar')
glob_correct('Y*CeXAFS.*', 'Ce La1')
glob_correct('Y*FeXAFS.*', 'Fe Ka')
a = arange(100)
plot(a , sin(a / 10))
plot_axhline(0.2)
a = arange(100)
plot_axhline(0.2)
plot(a , sin(a / 10))
plot_axhline(0.2)
plot_ayhline(0.2)
plot_axvline(0.2)
plot_axhline(0.99)
plot_axhline(0.77)
show(_plotter)
_plotter.plot1
_plotter.plot1.panel
_plotter.plot1.panel.axes
_plotter.plot1.panel.axes.axhline(0.3)
_plotter.plot1.panel.Refresh()
_plotter.plot1.panel.axes.axhline(0.2)
_plotter.plot1.panel.canvas
_plotter.plot1.panel.canvas.redraw()
_plotter.plot1.panel.canvas.update()
_plotter.plot1.panel.canvas.draw()
a = arange(100)
plot(a , sin(a / 10))
plot_axhline(0.77)
plot_axhline(0.77, xmin=20, xmax=60)
_plotter.plot1.panel.axes.axhline(0.2)
_plotter.plot1.panel.canvas.draw()
_plotter.plot1.panel.axes.axhline(-0.2, xmin=40,xmax=55)
_plotter.plot1.panel.canvas.draw()
_plotter.plot1.panel.axes.axhline(-0.2, xmin=40,xmax=55)
_plotter.plot1.panel.canvas.draw()
a = arange(100)*2
index_of(a, 50)
ktoe
ktoe(3)
index_of(arange(100), 2)
lorenztian(0, 1, 0.2)
lorentzian(0, 1, 0.2)
index_of(arange(100), 2)
as_ndarray([1,2,3,4])
add_plugin('a')
x = array([1,3,6,8,12])
myindex(x, 5)
myloren(x, 5, 2)
add_plugin('a')
myloren(x, 5, 2)
add_plugin('a')
myloren(x, 5, 2)
x = 0.2
myloren(x, 5, 2)
add_plugin('a')
myloren(x, 5, 2)
x = 9
myloren(x, 5, 2)
add_plugin('a')
x = 22
myloren(x, 5, 2)
add_plugin('a')
x = 3
add_plugin('a')
myloren(x, 5, 2)
add_plugin('a')
x = 22
myloren(x, 5, 2)
x = arange(10)*1.4
mynear(x, 5)
myindex(x, 5)
add_plugin('a')
myindex(x, 5)
x = array([1,3,6,8,12])
myindex(x, 5)
myindex(x, 2)
mynear(x, 2)
mynear(x, 2.8)
x = array([1,3.,6.,8.,12])
mynear(x, 2.8)
mynear(x, 2.)
mynear(x, 2.1)
mynear(x, 7.777)
myindex(x, 7.777)
x = array([1,3,6,8,12])
myindex(x, 7.777)
add_plugin('a')
myindex(x, 7.777)
myindex(x, 6)
myindex(x, 6.2)
mynear(x, 5.9)
dir(_sys)
show(_sys)
sys.searchGroups
_sys.searchGroups
etok
etok()
add_plugin('a')
mynear(arange(100), 3)
mynear(arange(100)/20, 3)
mynear(arange(100)/23, 3)
mynear(arange(100)/23., 3)
mynear(arange(100)/23., 6)
mynear(arange(100)/23., 3.3)
a = [group(x=1, y=2), group(x=2, y=3)]
a[0].x
a[1].x
id(a[1])
a[1].goo
hex(id(a[1]))
a.__name__ = 'a'
a[0].__name__ = 'a'
a[0].goo
a[0].__name__ = 'peanut butter'
a[0].goo
id(g[0])
id(a[0])
hex(id(a[1])), id(a[1])
other = a[0]
id(other), id(a[0])
other.x
g[0].x = 1234
a[0].x = 1234
other.x
nameof
nameof(other)
show()
show(cu)
show(cu.autobk_details)
x = arange(100)/27.
x
index_of(x, 3)
x = arange(100)/2.7
index_of(x, 32)
x[31]
x[86]
x[87]
index_nearest(x, 32)
index_nearest(x, 32.2)
index_of(x, 32.2)
dir()
show(_builtin)
show(_sys)
addplugin('nameof')
add_plugin('nameof')
x = group(foo=1)
nameof(x)
add_plugin('nameof')
import larch
larch.isGroup
larch.isgroup
larch.isGroup
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
x
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
nameof(33)
nameof('a')
nameof(None)
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
add_plugin('nameof')
nameof(x)
nameof(plot_axhline)
nameof(plot)
nameof(_sys)
a = 1
if a == 1: # comment
x = 22
y=  x/3.
print y
if x > 2: # comment
   print 'hello'
endif
run 'dt_correct..lar'
run 'dt_correct.lar'
flist = ls('.')
flist
flist[1]
dt_correct(flist[1], 'Sr')
dt_correct(flist[1], 'Sr Ka')
run 'dt_correct.lar'
dt_correct(flist[1], 'Sr Ka')
f = read_ascii('sr_xafs_OKCOS_spot3_1_001.dat')
show(f)
newplot(f.energy, f.mufluor)
autobk(f.energy, f.mufluor, rbkg=1, kw=2, group=f)
newplot(f.k, f.chi)
newplot(f.energy, f.mufluor)
plot(f.energy, f.bkg)
autobk(f.energy, f.mufluor, rbkg=1, kw=2, group=f, e0 = 16109)
autobk(f.energy, f.mufluor, rbkg=1, kw=2, group=f, e0=16109)
pre_edge(f.energy, f.mufluor, group=f, e0=16109)
show(f)
newplot(f.energy, f.norm)
autobk(f.energy, f.norm, rbkg=1, kw=2, group=f, e0=16109)
autobk(f.energy, f.norm, rbkg=1, kw=2, group=f)
f.e0
plot(f.energy, f.bkg)
newplot(f.k, f.chi*f.k)
newplot(f.k, f.chi*f.k**2)
flist
dt_correct(flist[2], 'Sr Ka')
g = dt_correct(flist[3], 'Sr Ka')
g = dt_correct(flist[4], 'Sr Ka')
run 'shell1.lar'
run 'shell2.lar'
run 'shell2plots.lar'
import epics
epics.caget('S:ActualMode.VAL')
p  = epics.PV('S:ActualMode.VAL')
p.enum_strs
exit
cu = read_ascii('cu.chi')
show(cu)
newplot(cu.k, cu.chi)
import pywt
a,d =pywt.dwt(chi, 'db2')
a,d =pywt.dwt(cu.chi, 'db2')
a
a.shape
d.shape
plot(cu.k, a)
plot(arange(len(a)), a)
newplot(arange(len(a)), a)
newplot(arange(len(a)), d)
len(a), len(cu.chi)
plot(arange(len(a)), a)
a = arange(100)
y = sin(a/3.) + cos(x/8)
y = sin(a/3.) + cos(a/8)
plot(a, y)
newplot(a, y, fullbox=False)
newplot(a, y, fullbox=False, grid=False)
newplot(a, y, fullbox=False, grid=False, bgcolor='red')
a = arange(100)
y = sin(a/3.) + cos(a/8)
newplot(a, y, fullbox=False, grid=False, bgcolor='red')
x = arange(10)
y = sin(x)
plot(x, y)
x1 = linspace(0, 10, 201)
interp
y1= interp(x, y, x1)
import scipy.io.netcdf
u = scipy.io.netcdf.netcdf_file('nc_movie_0094.nc')
imgs = u.variables['array_data'][:]
imshow(imgs[0,:,:,:])
f = gsescan_group('fe-xafs_TravSed2_spot2_XANES11.001')
f = read_gsescan('fe-xafs_TravSed2_spot2_XANES11.001')
dir(f)
show(f)
f.
f.det_addr
f.det_addr[0]
f.pos_addr
f.pos_addr[0]
x = arange(100)
y = sin(x)
plot(x, y)
axes = get_display().panel.axes
axes
dir(axes)
axes.get_xdata()
axes.lines
axes.lines[0]
axes.lines[0].x
axes.lines[0].xdata
dir(axes.lines[0])
axes.lines[0].get_xdata
axes.lines[0].get_xdata()
axes.lines[0].get_ydata()
a = arange(200)
y = sin(x/11)
y = sin(a/11)
z = cos(a / 33)
plot(a, z)
a = read_xrfmap('A.h5')
a
dir(a)
a.roi
fe=a.get_roimap('Fe')
imshow(fe)
fe
fe.shape
a.xrfmap
dir(a.xrfmap)
a.xrfmap.keys()
a.xrfmap.roimap
a.xrfmap['roimap']
dir(a.xrfmap['roimap'])
a.xrfmap['roimap'].keys()
a.xrfmap['config']
a.xrfmap['config'].keys()
a.xrfmap['config/rois']
a.xrfmap['config/rois'].keys()
a.xrfmap['config/rois/name']
a.xrfmap['config/rois/name'].value
a.xrfmap['config/rois/address'].value
a.xrfmap['config/rois/limits'].value
a.xrfmap['config/rois/name']
a.xrfmap.keys()
a.xrfmap['det1']
a.xrfmap['det1'].keys()
a.xrfmap['det1/roi_name'].value
a.xrfmap['det1/limits'].value
a.xrfmap['det1/roi_limits'].value
a.xrfmap['det1/roi_names'].value
a.xrfmap['det1/roi_name'].value
a.xrfmap['detsum/roi_name'].value
a.xrfmap['detsum/roi_limits'].value
a.xrfmap['det1/roi_limits'].value
a.xrfmap['det2/roi_limits'].value
a.xrfmap['det3/roi_limits'].value
a.xrfmap['det4/roi_limits'].value
a.xrfmap['det3'].keys()
a.xrfmap['det3/outcounts']
a.xrfmap['det3/counts']
a.xrfmap['config/rois']
a.xrfmap['config/rois'].keys()
a.xrfmap['roimap'].keys()
a.xrfmap['roimap/det_address'].keys()
a.xrfmap['roimap/det_address'].value
a.xrfmap['roimap/det_cor'].keys()
a.xrfmap['roimap/det_cor'].value
a.xrfmap['roimap/det_cor']
a.xrfmap['roimap/sum_list']
a.xrfmap['roimap/sum_list'].value
a.xrfmap['config']
a.xrfmap['config'].keys()
a.xrfmap['config/general']
a.xrfmap['config/general'].keys()
a.xrfmap['config/mca_settings'].value
a.xrfmap['config/mca_settings']
a.xrfmap['config/mca_settings'].keys()
a.xrfmap.keys()
a.xrfmap['roimap'].keys()
a.xrfmap.attrs
a.xrfmap.attrs.items()
a.xrfmap['det1'].keys()
list(a.xrfmap['config/roi/name'])
a.xrfmap['config/roi/name']
a.xrfmap['config/rois/name']
list(a.xrfmap['config/rois/name'])
[i.lower() for i in a.xrfmap['config/rois/name']]
rr = [i.lower() for i in a.xrfmap['config/rois/name']]
rr.index('ca ka')
rr.find('ca ka')
rr.index('ca ka')
x = [i for i a.xrfmap['config/rois/name']]
x = list(a.xrfmap['config/rois/name'])
x.pop(1)
x
a.xrfmap['config/rois/name'] = x
a.xrfmap['config/rois/name'].value = x
a.xrfmap['config/rois/name']
dir(a.xrfmap['config/rois/name'])
a.xrfmap['config/rois/name'][:]
a.xrfmap['config/rois/name'][:] = x
array(x)
a.xrfmap['config/rois/name'][:] = array(x)
a.xrfmap['config/rois/name']  = array(x)
a.xrfmap['config/rois/name'].value  = array(x)
a
dir(a)
a.root
a.filename
a.h5root
x.append('')
a.xrfmap['config/rois/name']  = array(x)
a.xrfmap['config/rois/name'] , x
a.xrfmap['config/rois/name'] , array(x)
a.xrfmap['config/rois/name'].value , array(x)
a.xrfmap['config/rois/name'][:] =  array(x)
a.xrfmap['config/rois/name']
del a.xrfmap['config/rois/name']
dir(a.xrfmap['config/rois'])
help(a.xrfmap['config/rois'])
del a.xrfmap['config/rois/name']
a.xrfmap['config/rois/name']
a.xrfmap['config/rois/name'].value
x
x.insert
x.insert('Ca Ka', 1)
x
x.insert(1, 'Ca Ka')
x
x = x[:10]
x
a.xrfmap['config/rois/name'][:] =  array(x)
x
a.xrfmap['config/rois/name']
a.xrfmap['config/rois/name'].value
a.xrfmap['config/rois/limits'].value
a.xrfmap['config/rois/limits']
roi_lims = a.xrfmap['config/rois/limits']
roi_lims
roi_lims.
roi_lims = a.xrfmap['config/rois/limits'].value
roi_lims
len(roi_lims)
roi_lims.pop
roi_lims[:1,:]
roi_lims[:1,:,:]
concatenate(roi_lims[:1,:,:], roi_lims[1:,;])
concatenate(roi_lims[:1,:], roi_lims[1:,;])
concatenate((roi_lims[:1,:], roi_lims[1:,;]))
concatenate
help(concatenate)
(roi_lims[:1,:], roi_lims[1:,;])
roi_lims[:1,:], roi_lims[1:,;]
roi_lims[:1,:]
roi_lims[1:,:]
roi_lims[:1,:], roi_lims[1:,:]
roi_lims
concatenate(roi_lims[:1,:], roi_lims[2:,:])
concatenate((roi_lims[:1,:], roi_lims[2:,:]))
roi_lims_new = concatenate((roi_lims[:1,:], roi_lims[2:,:]))
a.xrfmap['config/rois/limits']
a.xrfmap['det1/roi_limits']
a.xrfmap['det1/roi_limits'].value
r1 = a.xrfmap['det1/roi_limits'][:]
r1
list(r1)
r1_new = array(list(r1).pop(1))
r1_new
r1_new = array(list(r1).pop(1))
list(r1)
list(r1).pop(1)
r1
concatenate((r1[:1],r1[2:])
)
r1_new  concatenate((r1[:1],r1[2:]))
r1_new = concatenate((r1[:1],r1[2:]))
r1
r1_new
a.xrfmap['det1/roi_limits'] = r1_new
del a.xrfmap['det1/roi_limits']
a.xrfmap['det1/roi_limits'] = []
a.xrfmap['det1/roi_limits'].value = []
a = read_xrfmap('A.h5')
a
a.xrfmap
a.xrfmap['det1']
a.xrfmap['det1/roi_limits']
a.xrfmap['det1/roi_limits'].value
a.xrfmap['det1/roi_limits']
exit
x = read_xdi('fe_metal_rt.xdi')
pre_edge(x.energy, x.mutrans, group=x)
newplot(x.energy, x.norm)
x.edge_step
index_of
index_of(x.energy, x.e0)
index_nearest(x.energy, x.e0)
x.pre_edge
plot(x.energy, x.pre_edge)
newplot(x.energy, x.pre_edge)
 plot(x.energy, x.post_edge)
 plot(x.energy, x.mutrans)
pre_edge(x.energy, x.mutrans, group=x, nnorm=2, norm1=10)
newplot(x.energy, x.pre_edge)
 plot(x.energy, x.mutrans)
 plot(x.energy, x.post_edge)
x.edge_step
newplot(x.energy, x.norm)
plot(x.energy, x.flat)
x = read_xdi('fe_metal_rt.xdi')
pre_edge(x.energy, x.mutrans, group=x, norm1=50, nvict=1)
newplot(x.energy, x.pre_edge)
 plot(x.energy, x.post_edgs)
 plot(x.energy, x.post_edge)
 plot(x.energy, x.mutrans)
pre_edge(x.energy, x.mutrans, group=x, norm1=50, nvict=2)
newplot(x.energy, x.pre_edge)
 plot(x.energy, x.mutrans)
 plot(x.energy, x.post_edge)
x.edge_step
plot(x.energy, x.norm, win=2)
plot(x.energy, x.flat, win=2)
run 'en_edges.lar'
xrm_mapfile
read_xrmmap
read_xrfmap
a = read_xrfmap('seedmatrix.011.h5')
dir(a)
a
a.data
a.rowdata
a.dimension
a.h5root
dir(a.h5root)
.h5root.xrfmap
a.h5root.xrfmap
a.h5root.keys()
a.h5root['xrfmap']
dir(a.h5root['xrfmap'])
a.h5root['xrfmap'].keys()
a.h5root['xrfmap']['det1']
a.h5root['xrfmap']['det1'].counts
a.h5root['xrfmap']['det1'].keys()
a.h5root['xrfmap']['det1']['counts']
d1 = a.h5root['xrfmap']['det1']['counts'][1200:,:550, :]
a.h5root['xrfmap']['det1']['counts'][1200:,:550, :]
a.h5root['xrfmap']['det1']['counts'][1200:,:550, 0]
a.h5root['xrfmap']['det1']['counts']
dir(a.h5root['xrfmap']['det1']['counts'])
a.h5root['xrfmap']['det1']['counts'][1200:1300,:550, :]
d1 = a.h5root['xrfmap']['det1']['counts'][1200:,:550, :].sum(axis=0).sum(axis=0)
d1 = a.h5root['xrfmap']['det1']['counts'][1200:1300,:550, :].sum(axis=0).sum(axis=0)
xrf_display(d1)
d1
show_xrf
dir(_plotter)
xrf_plot(d1)
help(xrf_plot)
en1 = a.h5root['xrfmap']['det1']['energy']
xrf_plot(en1, d1)
a
dir(a)
dir(a.get_mca_rect)
help(a.get_mca_rect)
mca1  = a.get_mca_rect(0, 550, 1200, 1800)
mca1  = a.get_mca_rect(xmin=0, xmax=550, ymin=1200, ymax1800)
mca1  = a.get_mca_rect(xmin=0, xmax=550, ymin=1200, ymax=1800)
mca1  = a.get_mca_rect(ymin=0, ymax=550, xmin=1200, xmax=1900)
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1300)
mca1.energy
xrf_plot(mca1.energy, mca1.counts, mca=mca)
xrf_plot(mca1.energy, mca1.counts, mca=mca1)
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
550*700
550*700*2048
550*700*2048/1.e6
550*700/1.e6
550*700/1.e5
550*700/1.e4
550*700/3.e4
550*700
2**16
2**14
2**15
2048*2**15
2048*(2**15)
2048*(2**15)/1.e6
2048*(2**14)/1.e6
5/4
5//4
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
550*700/2**14
550*700/2**16
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
map = a.xrfmap[None]
map = a.xrfmap['None']
a.xrfmap
a.xrfmap.keys()
map = a.xrfmap['detsum']
reg map.regionref[slice(0, 550, 0), slice(1200, 1901,0), :]
reg =  map.regionref[slice(0, 550, 0), slice(1200, 1901,0), :]
map = a.xrfmap['detsum']
map
map = a.xrfmap['detsum']['count']
a.xrfmap['detsum'].keys()
a.xrfmap['detsum']['counts']
map = a.xrfmap['detsum']['counts']
reg =  map.regionref[slice(0, 550, 0), slice(1200, 1901,0), :]
reg =  map.regionref[slice(1200, 1903, 0), slice(0, 550, 0), :]
reg =  map.regionref[slice(0, 550), slice(1200, 1901), :]
reg =  map.regionref[slice(1, 550), slice(1200, 1901), :]
map
reg =  map.regionref[slice(1200, 1903), slice(0, 550), :]
reg
reg.shape
dir(reg)
map[reg]
map[map.regionref[slice(1200, 1903), slice(0, 50), :]]
map
xx = map[1200:1903, :550, :]
xx = map[1200:1903, :50, :]
xx += map[1200:1903, 50:100, :]
reg
dir(reg)
reg.shape
reg.size
len(reg)
map
map[1200, :550,:]
map[1200, :550,:].shape()
map[1200, :550,:].shape
map[1200, :550,:].sum(axis=0)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = read_xrfmap('seedmatrix.011.h5')
mca1  = a.get_mca_rect(det=None, ymin=0, ymax=550, xmin=1200, xmax=1900)
a = h5grou('s1.5')
a = h5group('s1.5')
a = h5group('s1.h5')
a.xrfmap.det1.counts
a = h5group('sxx.h5')
a = h5_group('sxx.h5')
a = h5group('sxx.h5')
import h5py
f = h5py.File('sxx.h5')
f = h5py.File('sxx.h5', 'r')
a = h5group('sxx.h5')
from xrm_mapfile import GSEXRM_MapFile
x = GSEXRM_MapFile('T1.h5')
m2 = x.get_mca_area('area_005')
x = GSEXRM_MapFile('T1.h5')
from xrm_mapfile import GSEXRM_MapFile
x = GSEXRM_MapFile('T1.h5')
m2 = x.get_mca_area('area_005')
m2
xrf_plot(m2.energy, m2.counts, mca=m2)
x = GSEXRM_MapFile('seedmatrix.011.h5')
m2 = x.get_mca_area('area_001')
xrf_plot(m2.energy, m2.counts, mca=m2)
dir(m2)
m2.save_mcafile('seedmatrix_011.seed1.xrf')
d1 = x.get_mca_area('area_001', det=1, dtcorrect=False)
2**15
x = GSEXRM_MapFile('seedmatrix.011.h5')
from xrm_mapfile import GSEXRM_MapFile
x = GSEXRM_MapFile('seedmatrix.011.h5')
d1 = x.get_mca_area('area_001', det=1, dtcorrect=False)
xrf_plot(d1.energy, d1.counts, mca=d1)
quit
read_mca
read_xrf
m = read_gsemca('x3.xrf')
xrf_plot(m.energy, m.counts, mca=m)
m
m = read_gsemca('x3.xrf')
xrf_plot(m.energy, m.counts, mca=m)
m
show(m)
dir(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m.rois
m.save_mcafile('x3_o2.xrf')
m = read_gsemca('x3.xrf')
xrf_plot(m)
m.rois
m.save_mcafile('t.xrf')
m = read_gsemca('x3.xrf')
m.add_roi('Ar Ka', 193, 211)
m.rois
m.add_roi('Ar Ka', 193, 211)
m = read_gsemca('x3.xrf')
m.rois
m.add_roi('Ar Ka', 193, 211)
m.save_mcafile('t.xrf')
m = read_gsemca('x3.xrf')
m.save_mcafile('t.xrf')
m.add_roi('Ar Ka', 193, 211)
m.save_mcafile('t.xrf')
m = read_gsemca('x3.xrf')
m.add_roi('Ar Ka', 193, 211)
m.rois
m.save_mcafile('t.xrf')
m.mcas
m.mcas[0].rois
xrf_plot(m)
m.mcas[0].rois
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m.add_rois
m.mcas[0].add_roi
m.mcas[0].rois
m.mcas[0].calib_slope
m.mcas[0].cal_slope
dir(m.mcas[0])
m.mcas[0].slope
m.mcas[0].offset
m = read_gsemca('x3.xrf')
m.add_roi('Ar Ka', 193, 211)
m = read_gsemca('x3.xrf')
m.add_roi('Ar Ka', 193, 211)
m.mcas[0].rois
m.save_mcafile('t.xrf')
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
f = h5group('Oct2013.h5')
f
dir(f)
f.xrfmap
dir(f.xrfmap)
f.xrfmap.__attrs
f.xrfmap._attrs
for k, v in f.xrfmap._attrs.items(): print k, v
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
m = read_gsemca('x3.xrf')
xrf_plot(m)
a = read_gsemca('srm1832.mca')
a
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
exit
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
run 'tomot.loar'
run 'tomo.lar'
sinos = read_sinos()
sinos = make_slices()
sinos['sr_ka']
imshow(sinos['sr_ka'])
rescale
help(rescale)
sinos['sr_ka'].shape
181/648.
u = rescale(sinos['sr_ka'], (0.28, 1))
u
u.shape
imshow(u)
u = rescale(sinos['sr_ka'], (1, 648/181.))
u.shape
imshow(u)
u = rescale(sinos['sr_ka'], 0.5)
u.shape
imshow(u)
u = sinos['sr_ka']
u.shape
u.max(), u.min()
u = sinos['sr_ka']/u.max()
u.max(), u.min()
imshow(u)
x = rescale(u, 0.5)
imshow(x)
x.shape
x = rescale(u, (0.28, 1))
x.shape
imshow(x)
iradon
recon1 = iradon(x)
imshow(recon1)
x = rescale(u, (1, 8))
x
x.shape
x = rescale(u, (1, 648/181.))
x.shape
imshow(iradon(x))
imshow(iradon(sinos['sr_ka']), win=2)
imshow(iradon_sart(x), win=3)
x = rescale(u, (0.56, 2))
x.shape
x = rescale(u, (1296/181., 2))
x.shape
x = rescale(u, (324/181., 2))
x.shape
x = rescale(u, (181./324, 2))
x.shape
imshow(iradon_sart(x), win=3)
imshow(x)
x.max()
x.min()
x = x/x.max()
x.min()
x.max()
xrecon= iradon_sart(x)
imshow(x, win=3)
imshow(xrecon, win=3)
x = rescale(u, (181./648, 1))
imshow(x, win=2)
imshow(iradon_sart(x), win=2)
imshow(iradon(x), win=3)
imshow(iradon(u), win=3)
x = rescale(u, (181./324, 1))
x
x.shape
xrecon = iradon_sart(x)
imshow(xrecon, win=2)
u.max(), u.min()
urecon = iradon_sart(u)
imshow(urecon, win=2)
imshow(u)
imshow(u, win=1)
xxx =  iradon(u)
imshow( iradon(u, filter='shepp-logan'))
imshow( iradon(u, filter='hamming'))
help(iradon)
imshow( iradon(u, filter='ramp'))
imshow(u, win=1)
imshow( iradon(u, filter='shepp-logan'))
x = rescale(u, (0.5, 324/181))
x.shape
imshow(u, win=1)
imshow( iradon(x, filter='shepp-logan'))
x = rescale(u, (1, 648/181))
imshow( iradon(x, filter='shepp-logan'))
run 'a.lar'
a
exit
a
dir(a)
a.rois
run 'a.lar'
exit
quit
a.energy
a.counts
fitpeak
fit_peak
a.rois[0]
a.rois[0].left
p = fit_peaks(a.energy[187:222], a.counts[187:222], model='Gaussian', background='linear')
fit_peak
p = fit_peak(a.energy[187:222], a.counts[187:222], model='Gaussian', background='linear')
p.cen
show(p)
p.params
dir(p.params)
p.params.center
p = fit_peak(a.energy[187:222], a.counts[187:222], model='Gaussian', background='linear')
quit
p = fit_peak(a.energy[187:222], a.counts[187:222], model='Gaussian', background='linear')
show(p)
newplot(p.x, p.y)
 plot(p.x, p.fit)
 plot(p.x, p.bkg)
p = fit_peak(1000*a.energy[187:222], a.counts[187:222], model='Gaussian', background='linear')
show(p)
show(p.params)
show(p.params.center
)
a
dir(a)
a.get_energy
a.get_energy()
a.mcas[0]
dir(a.mcas[0])
a.mcas[0].offset
quit
exit
quit
a
a.calib
a.__get_mca0()
plot(a.energy, a.mcas[0].energy-a.energy)
plot(a.energy, a.mcas[1].energy-a.energy)
plot(a.energy, a.mcas[2].energy-a.energy)
plot(a.energy, a.mcas[3].energy-a.energy)
a.mcas[3].energy-a.energy)
a.mcas[3].energy-a.energy
(a.mcas[3].energy-a.energy).sum()
a.mcas[3].energy-a.energy
a.mcas[9].energy-a.energy
a.mcas[0].energy-a.energy
(a.mcas[0].energy-a.energy).sum()
a.mcas[0].calib
a.mcas[0].offset
a.mcas[0].slope
a.mcas[0].quad
run 'a.lar'
p = fit_peak(a.energy[317:363], a.counts[317:363],'Gaussian', backgroun='linear')
p = fit_peak(a.energy[317:363], a.counts[317:363],'Gaussian', background='linear')
p.params
p.params.center
run 'a.lar'
quit
a = read_gsemca('srm1832.mca')
xrf_plot(a)
xrf_background(a.energy, a.counts, group=a)
plot(a.energy, a.counts)
plot(a.energy, a.counts, yscale_log=True)
plot(a.energy, a.counts, ylog_scale=True)
plot(a.energy, a.counts, yscale_log=True)
plot(a.energy, a.counts, yscale_log=True, new=True)
plot(a.energy, a.counts, ylog_scale=True, new=True)
plot(a.energy, (a.counts+0.001), ylog_scale=True, new=True)
plot(a.energy, (a.counts+0.1), ylog_scale=True, new=True)
plot(a.energy, (a.counts+0.91), ylog_scale=True, new=True)
plot(a.energy, (a.counts+1), ylog_scale=True, new=True)
plot(a.energy, (a.counts+1.0), ylog_scale=True, new=True)
plot(a.energy, a.bkg)
show(a)
plot(a.energy, a.bgr)
plot(a.energy, (a.counts+1.0), ylog_scale=True, new=True)
plot(a.energy, a.bgr, ylog_scale=True)
plot(a.energy, a.bgr+1, ylog_scale=True)
plot(a.energy, a.bgr+1.0, ylog_scale=True)
a = read_gsemca('srm1832.mca')
xrf_background(a)
quit
a = read_gsemca('srm1832.mca')
xrf_background(a)
a = read_gsemca('srm1832.mca')
xrf_background(a)
newplot(a.energy, a.counts)
newplot(a.energy, a.bgr)
newplot(a.energy, (1.0+a.counts), ylog_scale=True)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
xrf_background(a, exponent=3)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
xrf_background(a, exponent=4)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
xrf_background(a, exponent=2, bottom_width=5)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
xrf_background(a, exponent=2, bottom_width=2)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
newplot(a.energy, (1.0+a.counts), ylog_scale=True)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
xrf_background(a, exponent=3, bottom_width=2)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
xrf_background(a, exponent=2, bottom_width=2)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
xrf_background(a, exponent=3, bottom_width=2)
newplot(a.energy, (1.0+a.counts), ylog_scale=True)
xrf_background(a, exponent=3, bottom_width=3)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
xrf_background(a, exponent=2, bottom_width=3)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
xrf_background(a, exponent=4, bottom_width=3)
 plot(a.energy, (1.0+a.bgr), ylog_scale=True)
a = read_gsemca('srm1832.mca')
xrf_calib_fitrois(a)
a = read_gsemca('srm1832.mca')
xrf_calib_fitrois(a)
a = read_gsemca('srm1832.mca')
xrf_calib_fitrois(a)
a.init_calib
a.slope
a = read_gsemca('srm1832.mca')
a.slope
xrf_calib_compute(a)
xrf_calib_fitrois(a)
xrf_calib_compute(a)
a.new_calib
a = read_gsemca('srm1832.mca')
xrf_calib_compute(a)
a = read_gsemca('srm1832.mca')
xrf_calib_compute(a)
a.new_calib
a.offset, a.slop
a.offset, a.slope
a.init_calib
a.init_calib.pop('Ar Ka')
a.init_calib
exit
a = read_gsemca('srm1832.mca')
xrf_calib_compute(a)
a.new_calib
a.init_calib
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a.offseet
a.offset
xrf_plot(a)
quit
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a.filename
a = read_gsemca('srm1832.mca')
a.filename
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
xrf_plot
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a.counts
import scipy.signal
filter = gaussian(0, 10)
filter
a.counts
filter = gaussian(a.energy, 0, 10)
filter
len(filter)
plot(a.energy, filter)
filter = gaussian(a.energy, 0, 0.20)
plot(a.energy, filter)
counts1 = scipy.signal.convolve(a.counts, filter)
plot(a.energy, counts1)
counts1
len(counts1)
newplot(a.energy, counts1[:2048])
 plot(a.energy, a.counts)
 plot(a.energy, a.counts*400)
newplot(a.energy, counts1[:2048])
 plot(a.energy, a.counts*100)
 plot(a.energy, a.counts*40)
 plot(a.energy, a.counts)
newplot(a.energy, counts1[:2048]/35.)
newplot(a.energy, a.counts)
newplot(a.energy, counts1[:2048]/25.)
newplot(a.energy, a.counts)
 plot(a.energy, counts1[:2048]/25.)
counts2 = scipy.signal.deconvolve(counts1, filter)
len(counts2)
len(counts2[0])
len(counts2[1])
 plot(a.energy, counts2[0])
newplot(a.energy, a.counts)
 plot(a.energy, counts2[0])
counts3 = scipy.signal.deconvolve(a.counts, filter)
 plot(a.energy, counts3[0])
counts3
len(counts3)
len(counts3[1])
 plot(a.energy, counts3[1])
filter
newlot(a.energy, filter)
newplot(a.energy, filter)
filter[:200]
filter[:20]
filter[:100]
counts3 = scipy.signal.deconvolve(a.counts, filter[:100])
len(counts3[0])
newplot(a.energy[:1949], counts3[0])
 plot(a.energy, a.counts)
counts3[1]
len(counts3[1])
plot(a.energy, counts3[1])
newplot(a.energy, counts3[1])
xf = arange(20)
filter = gaussian(xf, 10, 2)
plot(xf, filter)
newplot(xf, filter)
counts3 = scipy.signal.deconvolve(a.counts, filter)
len(counts3[0])
plot(a.energy[:2020], counts3[0][:2020])
newplot(a.energy[:2020], counts3[0][:2020])
newplot(a.energy[:2000], counts3[0][:2000])
newplot(a.energy[:500], counts3[0][:500])
newplot(xf, filter)
xf = linspace(0, 0.1, 101)
filter = gaussian(xf, 10, 2)
filter = gaussian(xf, 0.02, 0.04)
newplot(xf, filter)
filter = gaussian(xf, 0.0, 0.02)
newplot(xf, filter)
filter = gaussian(xf, 0.05, 0.04)
newplot(xf, filter)
filter = gaussian(xf, 0.05, 0.01)
newplot(xf, filter)
r = scipy.signal.deconvolve(a.counts, filter)
len(r[0])
newplot(np.arange(1948), r[0])
newplot( arange(1948), r[0])
newplot( arange(400:1200), r[0][400:1200])
newplot( arange(800), r[0][400:1200])
newplot( arange(600), r[0][400:1000])
newplot( arange(10), r[0][:10])
newplot( arange(50), r[0][:50])
newplot( arange(250), r[0][:250])
filter = gaussian(xf, 0.0, 0.01)
r = scipy.signal.deconvolve(a.counts, filter)
newplot( arange(50), r[0][:50])
newplot( arange(250), r[0][:250])
help(convolve)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
a = read_gsemca('srm1832.mca')
xrf_plot(a)
xray_line('Cu')
xray_lines('Cu')
xray_lines('Cu')['Ka1']
xray_lines('Cu')['Ka2']
xray_lines('Cu')['Ka3']
clines = xray_lines('Cu')
clines['Ka1']
clines['Ka1'][1]
clines['Ka2'][]
clines['Ka2']
8406.3*0.577 + 8026.7*0.294
(8406.3*0.577 + 8026.7*0.294)/(0.577+0.294)
clines['Ka2']
8406.3*0.577 + 8026.7*0.294
clines['Ka1']
(8046.3*0.577 + 8026.7*0.294)/(0.577+0.294)
clines['Ka1']
help(xray_lines)
xray_lines('Mn', initial_level='K')
for key, val in xray_lines('Mn', initial_level='K'):
   print key, val[0], val[1], val[4]
endfor
   print key, val[0], val[1], val[4]
for key, val in xray_lines('Mn', initial_level='K').items():
   print key, val[0], val[1], val[4]
endfor
for key, val in xray_lines('Mn', initial_level='K').items():
   print key, val[0], val[1], val[3]
endfor
xrf_calib_fitrois(a)
a.init_calib
xray_lines('Mn')
xray_lines('Cu', initial_level='Cu')
xray_lines('Cu', initial_level='K')
xray_line_mean('Cu', 'ka')
a = read_gsemca('srm1832.mca')
a = read_gsemca('srm1832_.mca')
add_plugin('x')
a = read_gsemca('srm1832.mca')
xrf_calib_fitrois
xrf_calib_fitrois(a)
a.init_larch
a.init_calib
run 'a.lar'
a
a.init_calib
run 'a.lar'
a
run 'a.lar'
a.init_calib
run 'a.lar'
x = array([0, 1])
y = array([6, 7])
linregress(x, y)
x = array([0, 1, 2])
y = array([6, 7, 8])
linregress(x, y)
run 'a.lar'
xrf_plot(a)
help(linregress)
a.calib_x
a.cal_x
a.cal_y
a.init_calib['V Ka'][4]
a.init_calib['V Ka'][4].params.center.stderr
a.init_calib['V Ka'][4].params.sigma.stderr
a.init_calib['V Ka'][4].params.sigma
a.init_calib['Cu Ka'][4].params.sigma.stderr
a.init_calib['Cu Ka'][4].params.center.stderr
a.cal_x
a.cal_dx
plot(a.cal_y, a.cal_x, dx=a.cal_dx)
newplot(a.cal_y, a.cal_x, dx=a.cal_dx)
newplot(a.cal_y, a.cal_x, dy=a.cal_dx)
newplot(a.cal_y, a.cal_x, dy=a.cal_dx*10)
newplot(a.cal_y, a.cal_x, dy=a.cal_dx)
a.cal_dx
newplot(a.cal_y, a.cal_x, dy=a.cal_dx)
a.cal_x
a.cal_dx
a.cal_d
newplot(a.cal_y, a.cal_x, dy=a.cal_dx)
a.cal_dx
xrf_plot(a)
exit
a
xrf_peak('Fe Ka', sigma=0.2, center=6.405, amplitude=200)
fe = xrf_peak('Fe Ka', sigma=0.2, center=6.405, amplitude=200)
dir(fe)
fe._calc_peak
fe._calc_peak()
fe._calc_peak(a.energy)
fe.init = fe._calc_peak(a.energy)
plot(a.energy, fe.init)
fe = xrf_peak('Fe Ka', sigma=0.3)
fe.center
lookup_material('diamond')
lookup_material('kapton')
show(_xray)
mu_elam('N', 9000)
help(mu_elam)
mu_elam('N', 9000)*0.00125
mu_elam('N', 9000)
mu_elam('Cu', 9000)
mu_elam('Cu', 9000)*8.94
x = 1/(mu_elam('Cu', 9000)*8.94)
x
mu_elam('Cu', 9000)*8.94
mu_elam('N', 9000)*0.00125
1/(mu_elam('N', 9000)*0.00125)
1/(mu_elam('C', 9000)*3.51)
10000./(mu_elam('C', 9000)*3.51)
1./(mu_elam('C', 9000)*3.51)
help(mu_elam)
dir(_xray)
incoherent_xsec('C', 9000)
incoherent_xsec('C', 9000) + mu_elam('C', 9000)
(incoherent_xsec('C', 9000) + mu_elam('C', 9000))*3.51
1/((incoherent_xsec('C', 9000) + mu_elam('C', 9000))*3.51)
1/((coherent_xsec('C', 9000) + mu_elam('C', 9000))*3.51)
1/((coherent_xsec('C', 9000) + incoherent_xsec('C', 9000) + mu_elam('C', 9000))*3.51)
1/((mu_elam('C', 9000))*3.51)
1/((mu_elam('N2', 9000))*3.51)
1/((mu_elam('N', 9000))*3.51)
material_lookup('diamond')
material_mu('diamond', 9000)
1/material_mu('diamond', 9000)
material_mu('diamond', 9000)
1/material_mu('diamond', 9000)
1/material_mu('boron nitride', 9000)
(1.676+5.306)*2.29
(1.676+5.306)*2.29/2.0
2.0/((1.676+5.306)*2.29)
(30.084 + 123.417)
1/material_mu('boron nitride', 9000, kind='photo')
1/material_mu('boron nitride', 9000, kind='total')
1/material_mu('boron nitride', 9000, kind='photo')
mu_elam('B', 9000, kind='photo')
mu_elam('B', 9000, kind='total')
mu_elam('B', 9000, kind='photo')
1/material_mu('boron nitride', 9000, kind='photo')
mu_elam('B', 9000, kind='total')
mu_elam('B', 9000, kind='photo')
1/material_mu('ethanol', 9000, kind='photo')
1/material_mu('ethanol', 9000, kind='total')
material_mu('ethanol', 9000, kind='total')
(16.938 * 0.789)/9
9/(16.938 * 0.789)
material_mu('sapphire', 9000, kind='total')
95.865*3.97
1/(95.865*3.97)
5/(95.865*3.97)
1/(95.865*3.97)
material_mu('silicon nitride', 9000, kind='total')
7/(224.5*3.44)
10000* 7/(224.5*3.44)
material_mu('silicon nitride', 9000, kind='total')
10000* 7/(159.3*3.44)
material_mu('silicon nitride', 9000, kind='photo')
10000* 7/(155.4*3.44)
123.4*4 + 2145.9*3
(123.4*4 + 2145.9*3)*3.44/140.29
(123.4*4 + 2145.9*3)*140.29/3.44
1/((123.4*4 + 2145.9*3)*140.29/3.44)
1/((123.4*4 + 2145.9*3)*3.44/140.29)
1/((123.4*4 + 2145.9*3)*3.44/(140.29*1.66053892))
atomic_mass('Si')
atomic_mass('Si')*3 + atomic_mass('N')*3
atomic_mass('Si')*3 + atomic_mass('N')*4
molar_mass
mu_elam('Si', 9000)
mu_elam('B', 9000)
atomic_mass('B')
atomic_mass('B')*10.81*1.66053892
atomic_mass('B')*10.81*1.66053892/2.34
atomic_mass('B')*2.34/(10.81*1.66053892)
mu_elam('B', 9000)*2.34/(10.81*1.66053892)
mu_elam('B', 9000)
mu_elam('B', 9000)*2.34
mu_elam('B', 9000)
mu_elam('B', 9000)/30.084
30.084/mu_elam('B', 9000)
173.791/mu_elam('B', 5000)
10.81*1.66053892/2.34
2.34/(10.81*1.66053892)
10.81*1.66053892/2.34
10.81/1.66053892/2.34
2.34/10.81*1.66053892
2.34/10.81
10.8/2.34
14.96/9.012
10.81*1.660
10.81*1.660 * 9.682
atomic_mass('B')
atomic_mass('V')
mu_elam('B', 5000)*atomic_mass('B')*1.660
2.34*(173.791+ 731.359)/(24.819)
1/(2.34*(173.791+ 731.359)/(24.819))
1/(2.29*(173.791+ 731.359)/(24.819))
(2.29*(173.791+ 731.359)/(24.819))
(173.791+ 731.359)/ 24.819
2.29 * (173.791+ 731.359)/ 24.819
(24.819/2.29)&(173.791+ 731.359)
(24.819/2.29)*(173.791+ 731.359)
1/((24.819/2.29)*(173.791+ 731.359))
1598.286/(26.920*1.660)
2.72*1598.286/(26.920*1.660)
2.72*(1598.286/(26.920*1.660))
AMU
2.72*(1598.286/(26.920*1.6605))
35.692*2.72
26.970*1.6605*1598.286*2.72
1/(26.970*1.6605*1598.286*2.72)
1/(1598.286*2.72/(1.6605*26.970))
(1598.286*2.72/(1.6605*26.97)
)
(1598.286*2.72/(1.6605*26.97))
(1598.286*2.72)/(1.6605*26.97)
1/(1598.286*2.72)/(1.6605*26.97)
1/((1598.286*2.72)/(1.6605*26.97))
(1598.286*2.72)/(1.6605*26.97)
mu_elam('Al',9000) * (1.6605*26.970)
material_mu('aluminum', 9000)
atomic_mass('Al')
material_mu('aluminum', 9000)
1/35.69196
1/(2.72*35.69196)
material_mu('aluminum', 9000)
1/material_mu('aluminum', 9000)
1/material_mu('ethanol', 9000)
1/material_mu('methanol', 9000)
1/material_mu('air', 9000)
help(material_mu)
e = linspace(8000, 10000, 100)
e
e = linspace(8000, 10000, 101)
e
material_mu('air', e)
x = material_mu('air', e)
plot(e, x)
material_mu('air', e)
e = linspace(1000, 10000, 901)
e
x = material_mu('air', e)
plot(e, x)
plot(e, 1/x)
newplot(e, x)
newplot(e, x, ylog_scale=True)
newplot(e, 1/material('diamond', e), ylog_scale=True)
newplot(e, 1/material_mu('diamond', e), ylog_scale=True)
newplot(e, 1/material_mu('copper', e), ylog_scale=True)
newplot(e, 10000/material_mu('copper', e), ylog_scale=True)
newplot(e, 10000/material_mu('sapphire', e), ylog_scale=True)
newplot(e, 10000/material_mu('kapton', e), ylog_scale=True)
e = 10**linspace(0, 3, 31)
e
e = 10**linspace(0, 4, 31)
e
e = 10**linspace(0, 5, 51)
e
newplot(e, 10000/material_mu('kapton', e), ylog_scale=True)
newplot(e, 10./material_mu('air', e), ylog_scale=True)
newplot(e, 10./material_mu('copper', e), ylog_scale=True)
a = read_gsemca('srm1932.mca') ; xrf_plot(a)
a = read_gsemca('srm1832.mca') ; xrf_plot(a)
a = read_gsemca('srm1932.mca') ; xrf_plot(a)
quit
_xray.materials
_sys._xray
_xray
dir(_xray)
_xray._materials
quit
