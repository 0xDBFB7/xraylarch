.. _programming_chapter:

====================================
Programming with Larch from Python
====================================

This chapter describes the use of the `larch` module from Python.  All the
functionality described elsewhere in this documentation is available from
the `larch` Python module and is available from::

    import larch


A simple session might look like this::

    from larch.xafs import autobk
    from larch.io import read_xdi
    from wxmplot.interactive import plot

    dat = read_xdi('examples/xafsdata/fe3c_rt.xdi')
    dat.mu = dat.mutrans
    autobk(dat, rbkg=1.0, kweight=2)
    plot(dat.k, dat.k*dat.chi, xlabel='k 1/A', ylabel='chi*k')

    from larch.xray import xray_line
    print(xray_line('Cu', 'Ka1'))
    (8046.3, 0.577108, u'K', u'L3')


More elaborate examples are given throughout this documentation.

creeating and using a larch interpreter in Python
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The example above shows the larch functionality being accessed directly from
Python.  In addition, from Python you can create an instance of a `larch`
Interpreter and communicate with it the Larch macro language with::

    >>> from larch import Interpreter
    >>> session = Interpreter()
    >>> session("""
    >>>   dat = read_xdi('examples/xafsdata/fe3c_rt.xdi')
    >>>   dat.mu = dat.mutrans
    >>>   autobk(dat, rbkg=1.0, kweight=2)
    >>> """)

and so forth (and note that the tolerance against whitespace in the larch macro
language might seem not so silly after all!). If you're running pre-defined
scripts or starting from the larch code generated by one of the GUIs, this can be
a useful way to use Larch from python - combine that with some string formatting
and you can readily have a program that wraps analysis procedures.  Indeed this
is how `XAS_Viewer` works. 

The larch `session` instance will have a `symtable` attribute that is the
top-level of the data namespace in the larch session - the `_main` group - that
you can access directly from Python.  For example, following the above session,
you could do::

    >>> dat = session.symtable.dat
    >>> print(dat.filename, dat.e0, len(dat.energy), len(dat.chi))
    fe3c_rt.xdi 7122.5 348 299

As described elsewhere, that `dat` value, and many of the container objects
created and used in Larch will be larch Groups. From Python, these are very
similar to empty classes or namespace objects: containers of data accessed using
Python's `thing.attribute` syntax.  As you might imagine, you can create Groups
from Python and set them into the namespace of a larch session and then access
that data from the session::

     >>> from larch import Group
     >>> import numpy as np
     >>> mygroup = Group(a = 1, message='hello', x=np.linspace(-10, 10, 201))
     >>> session.symtable.frompy  = mygroup
     >>> session("print(frompy.message, len(frompy.x))")
     hello 201

This can make it very easy to embed a larch session (or more than one) into a
Python program and use it as a calculation engine.

     
the optional `_larch` argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


In earlier versions of larch, many functions in the Python interface required or
strongly recommended making a larch interpreter and passing this around as a
"session instance" to many of the larch functions.  That is, you might see::

    from larch import Interreter
    from larch.io import read_xdi

    _larch = Interpreter()
    dat = read_xdi('examples/xafsdata/fe3c_rt.xdi', _larch=_larch)  # not needed!

With version 0.9.49, this is no longer needed, and will generally not be used.
For backward compatibility, and in some existing code, you may still see that
many functions have an optional `_larch` argument.  At this point, this is no
longer needed or recommended.
    
  

Larch submodules
============================

.. _lmfit:     https://lmfit.github.io/lmfit-py/
.. _xraydb:    https://xraypy.github.io/XrayDB/
.. _pyepics:   https://pyepics.github.io/pyepics/
.. _wxmplot:   https://newville.github.io/wxmplot/


The `larch` module is broken up into a number of submodules. The ones that are most likely to be
useful for Python programmers are described briefly in the table below.

.. _pymodules_table:

**Table of the Larch Python Modules**  This is an incomplete list of all the Python modules
available from `larch`, but should cover those that are most useful to Python programmers.

   
  +--------------------------------+-----------------------------------------------------------+
  | module name                    |   Description                                             |
  +================================+===========================================================+
  | `larch`                        | top-level module, with Interpreter and applications       |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.io`                     | input/output routines                                     |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.xafs`                   | XAFS analysis and data processingd                        |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.xray`                   | X-ray properties (with `xraydb`_)                         |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.xrf`                    | X-ray fluorescenece processing and analysis               |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.xrd`                    | X-ray diffraction processing                              |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.xrmmap`                 | working with XRF/XRD microprobe maps                      |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.fitting`                | Data fitting (with `lmfit`_)                              |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.math`                   | General-purpose mathematical functions                    |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.utils`                  | General-purpose utility functions                         |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.epics`                  | using with Epics control system (with `pyepics`_)         |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.xmlrpc_server`          | running a Larch server for other processes                |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.shell`                  | command-line shell                                        |
  +--------------------------------+-----------------------------------------------------------+
  | `larch.wxlib`                  | Wx-python utilities (including `wxmplot`_ plotting)       |
  +--------------------------------+-----------------------------------------------------------+


Note that several of these modules (`xray`, `fitting`, `epics`, the plotting
functionality in `wxlib`) are fairly thin wrappers around other python libraries
that are generally well-documented and do not need to be used only from with
larch.  If you find yourself using these submodules, it might be easier to just
use the more general-purpose library.

