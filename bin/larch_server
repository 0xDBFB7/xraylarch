#!/usr/bin/env python
"""Larch server -- this will make sure a larch server is
running on the desired port.

Usage:  larch_server [OPTIONS] [start|stop|restart|status]

with options
  -p PORT, --port=PORT  port number for remote server [4966]
"""
from __future__ import print_function
__version__ = 'version 2.0'

import os
import sys
import time
import json
from subprocess import Popen
from optparse import OptionParser
from xmlrpclib import ServerProxy
from larch.xmlrpc_server import (test_server, get_next_port,
                                 NOT_IN_USE, CONNECTED, NOT_LARCHSERVER)

def start_server(port=4966):
    "start server"
    thispath, thisfile = os.path.split(os.path.abspath(__file__))
    args = [sys.executable,
            os.path.join(thispath, 'larch'),
            '-r', '-p %d' % port]
    return Popen(args)

def get_server(port=4966, host='localhost'):
    "returns server at a port"
    return ServerProxy('http://%s:%d' % (host, port))

def stop_server(port=4966, host='localhost'):
    "stop server"
    server = get_server(port=port, host=host)
    server.shutdown()

usage = "usage: %prog [options] [start|stop|restart|next|status|report]"

parser = OptionParser(usage=usage, prog="larch_server",
                      version="larch rpc server: %s" % __version__)

parser.add_option("-p", "--port", dest="port", default='4966',
                  metavar='PORT', help="port number for server")

(options, args) = parser.parse_args()

if len(args) == 0:
    args = ['status']

command = args[0]
host = 'localhost'
port = int(options.port)

server_state = test_server(port=port)
premsg = 'larch server on port %d:' % (port)

def msg(txt):
    print('%s %s' % (premsg, txt))

if command == 'start':
    if server_state == CONNECTED:
        msg('already running')
    elif server_state == NOT_IN_USE:
        start_server(port=port)
    else:
        msg('port is in use, cannot start')

elif command == 'stop':
    if server_state == CONNECTED:
        stop_server(port=port)

elif command == 'next':
    port = get_next_port(port=port)
    start_server(port=port)

elif command == 'restart':
    if server_state == CONNECTED:
        stop_server(port=port)

    time.sleep(0.5)
    start_server(port=port)

elif command == 'status':
    if server_state == CONNECTED:
        msg('running')
        sys.exit(0)
    elif server_state == NOT_IN_USE:
        msg('not running')
        sys.exit(1)
    else:
        msg('port is in use by non-larch server')
elif command == 'report':
    print("larch server report:")
    if server_state == CONNECTED:
        s = get_server(port=port)
        info = s.get_client_info()
        last_event = info.get('last_event', 0)
        last_used = time.ctime(last_event)
        serverid  = int(info.get('pid_server', 0))
        procid    = int(info.get('pid', 0))
        appname   = info.get('app',     'unknown')
        machname  = info.get('machine', 'unknown')
        username  = info.get('user',    'unknown')
        keepalive_time = info.get('keepalive_time', -1)
        keepalive_time += (last_event - time.time())
        keepalive_units = 'seconds'
        if keepalive_time > 300:
            keepalive_time = keepalive_time/60.0
            keepalive_units = 'minutes'
        if keepalive_time > 300:
            keepalive_time = keepalive_time/60.0
            keepalive_units = 'hours'


        print(" Client Machine Name = %s" % machname)
        print(" Client Process ID   = %s" % str(procid))
        print(" Client Application  = %s" % appname)
        print(" Client User Name    = %s" % username)
        print(" Client Last Used    = %s" % last_used)
        print(" Server Process ID   = %s" % serverid)
        print(" Server will expire in  %i %s" % (keepalive_time, keepalive_units))

    elif server_state == NOT_IN_USE:
        msg('not running')
        sys.exit(1)
    else:
        msg('port is in use by non-larch server')


else:
    print("larch_server: unknown command '%s'. Try -h" % command)
