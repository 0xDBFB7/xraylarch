#!/usr/bin/env pythonw
"""Larch server -- this will make sure a larch server is
running on the desired port.
Usage:  larch_server [OPTIONS] [start|stop|restart|status]
with options
  -p PORT, --port=PORT  port number for remote server [4966]
"""
from __future__ import print_function
__version__ = 'version 1'

import os
import sys
import time
import json
from distutils.spawn import find_executable
from subprocess import Popen
from optparse import OptionParser
from xmlrpclib import ServerProxy

def start_server(port=4966, host='localhost',
                 local_echo=False, with_wx=False, quiet=False):
    "start server"
    thispath, thisfile = os.path.split(os.path.abspath(__file__)) 

    args = [find_executable('python'),
            os.path.join(thispath, 'larch'),
            '-r', '-x', '-p %d' % port]
    if quiet:  
        args.append('-q')
    return Popen(args)

def get_server(port=4966, host='localhost'):
    "returns server at a port"
    return ServerProxy('http://%s:%d' % (host, port))

def stop_server(port=4966, host='localhost'):
    "stop server"
    server = get_server(port=port, host=host)
    server.larch("exit")


def test_server(port=4966, host='localhost'):
    "is a valid Larch server running on this port?"
    server = get_server(port=port, host=host)
    methods = []
    try:
        methods = server.system.listMethods()
    except:
        return False
    if len(methods) < 5 or 'larch' not in methods:
        return False
    ret = ''
    try:
        server.larch('print(_sys.config.user_larchdir)')
        ret = server.get_messages()
    except:
        return False
    if len(ret) < 1:
        return False
    return True

usage = "usage: %prog [options] [start|stop|restart|status]"

parser = OptionParser(usage=usage, prog="larch_server",
                      version="larch rpc server: %s" % __version__)

parser.add_option("-p", "--port", dest="port", default='4966',
                  metavar='PORT', help="port number for server")
parser.add_option("-q", "--quiet", action="store_true", dest="quiet", default=False,
                  help="suppress screen messages from this launcher script")
parser.add_option("-x", "--nowx", dest="nowx", action="store_true",
                  default=True, help="use wx graphics mode, default=True")


(options, args) = parser.parse_args()

if len(args) == 0:
    args = ['status']

command = args[0]
port = int(options.port)

if command == 'start':
    if test_server(port=port):
        if not options.quiet: print('Yes: Larch server on port %d running' % port)
    else:
        start_server(port=port, quiet=options.quiet, with_wx=(not options.nowx))

elif command == 'stop':
    #  if test_server(port=port):
    stop_server(port=port)
    #else:
    #    if not options.quiet: print('No: Larch server on port %d not running' % port)

elif command == 'restart':
    if test_server(port=port):
        stop_server(port=port)
    time.sleep(0.5)
    start_server(port=port, quiet=options.quiet, with_wx=(not options.nowx))

elif command == 'status':
    if test_server(port=port):
        if not options.quiet: print('Yes: Larch server on port %d running' % port)
        sys.exit(0)
    else:
        if not options.quiet: print('No: Larch server on port %d not running' % port)
        sys.exit(1)