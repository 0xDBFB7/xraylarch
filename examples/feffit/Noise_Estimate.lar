p1 = feffpath('feff0001.dat')
p1.e0 = -0.2
p1.sigma2 = 0.006
path2chi(p1, interp='linear')

eps_off = 1.e-9
kwin='parzen'
for iscale in range(20):
    scale = 1.e-7 *  2**iscale
    eps = []
    for  i in range(25):
        sum   = p1.chi + random.normal(size=len(p1.chi), scale=scale)
        fdat  = group(k=p1.k, chi=sum)
        trans = feffit_transform(kmin=3, kmax=16, kweight=2, dk=3.5, window=kwin)
        d1 = feffit_dataset(data=fdat, pathlist=[p1], transform=trans)
        d1.prepare_fit()
        eps.append(trans.epsilon_k)
    endfor
    trans._xafsft(fdat.chi, group=fdat, rmax_out=30)

    if iscale == 0:
         newplot(fdat.k, fdat.chi*fdat.k)
         plot(fdat.k, fdat.kwin*0.7)
         newplot(fdat.r, fdat.chir_mag, xmax=25, win=2)
         print ' I  InputNoise| Estimated Noise       =>  Ratio'
    else:
        update_trace(fdat.k, fdat.chi*fdat.k, trace=1, win=1)
        update_trace(fdat.r, fdat.chir_mag, trace=1, win=2)
    endif
    eps  = array(eps)
    eave = eps.mean()
    pred = sqrt(scale**2 + eps_off**2)
    print ' %2.2i  %.7f  | %.7f +/-  %.7f  => %.7f || %.7f=> %.7f' % (iscale, scale, eave, eps.std(), eave/scale, pred, pred/eave)
endfor
