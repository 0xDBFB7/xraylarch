## examples/xafs/doc_deconv4.lar
# while inotifywait -e close_write *.lar ../../larch/xafs/*.py; do larch --exec doc_deconv4.lar; done



data = read_ascii('../xafsdata/pt_metal_rt.xdi', labels='energy time i1 i0')

data.mu = -log(data.i1 / data.i0)
data.mu += np.random.normal(0,0.01,len(data.mu))


pre_edge(data)
autobk(data, rbkg=1.1, kweight=2)
xftf(data, kmin=2, kmax=17, dk=5, kwindow='kaiser', kweight=2)

xas_deconvolve(data, esigma=core_width('Pt', edge='L3'))

decon = group(energy=data.energy, mu=data.deconv, filename=data.filename)
autobk(decon, rbkg=1.1, kweight=2)
xftf(decon, kmin=2, kmax=17, dk=5, kwindow='kaiser', kweight=2)

# plot in E
plot_mu(data, show_norm=True, emin=-50, emax=250)
plot(data.energy, data.deconv, label='deconvolved',  win=1)


xas_iterative_deconvolve(data, esigma=core_width('Pt', edge='L3'), max_iterations=50)

decon = group(energy=data.energy, mu=data.deconv, filename=data.filename)
autobk(decon, rbkg=1.1, kweight=2)
xftf(decon, kmin=2, kmax=17, dk=5, kwindow='kaiser', kweight=2)

plot(data.energy, data.deconv, label='iterative_deconvolved',  win=1)
plot(np.arange(len(data.convergence)), data.convergence, label='Convergence',  win=2)





input()
## end examples/xafs/doc_deconv3.lar
