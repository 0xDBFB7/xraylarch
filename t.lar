import os

roinames =('K Ka', 'Ti Ka', 'I La1', 'Fe Ka', 'Br Ka', 'Rb Ka')

def get_map(mapname):
    map = None
    if not mapname.endswith('.h5'): mapname = '%s.h5' % mapname
    for thing in dir(_main):
         if thing.startswith('map0'):
              thing = getattr(_main, thing)
              try:
                   dname, fname = os.path.split(getattr(thing, 'filename'))
              except:
                  fname = ''
              #endtry
              if fname == mapname:
                   map = thing
              #endif
         #endif
    #endfor
    return map
#enddef     

def write_slices(mapname, width = 1.00):
     map = get_map(mapname)
     if map is None:
          print 'Cannot find map %s' % mapname
          return
     #endif

     filename = os.path.split(map.filename)[1]
     prefix   = os.path.splitext(filename)[0]
              
     pos   = map.xrfmap['positions/pos']
     xstep = abs(int(diff(pos[0,:,0]).mean()*1000.0)/1000.0)
     ystep = abs(int(diff(pos[:,0,1]).mean()*1000.0)/1000.0)
     yvals = pos[:,0,1].round(3)
     xvals = pos[0,:,0].round(3)

     roimaps = [map.get_roimap(roi) for roi in roinames]

     ny, nx = roimaps[0].shape
     nx_sel = width/xstep

     for icol in range(int(1+nx/nx_sel)):
         j1 = nx_sel*icol
         j2 = min(nx+1, nx_sel*(icol+1)-1)
         dat = zeros((len(roimaps), ny))
         for iroi, roi in enumerate(roimaps):
           dat[iroi,:] =  roi[:,j1:j2].sum(axis=1)
         #endfor

         dat = dat.transpose()
         label = ', '.join(roinames)
         out = ['# from map %s' % filename, 
                '# vertical slices of %i pixels (%.3f mm)' % (nx_sel, xstep),
                '# Y,  %s' % label]
         for iy in range(ny):
              vals = [yvals[iy]]
              vals.extend(dat[iy,:].tolist())
              out.append(', '.join(['%.2f' % x for x in vals]))
         #endfor
         out.append('')
         fout = '%s_col%i.csv' % (prefix, 1+icol)
         fh = open(fout, 'w')
         fh.write('\n'.join(out))
         fh.close()
         print 'wrote %s,  columns [%i:%i] ' %  (fout, j1, j2)
     #endfor
     print 'Done.'
#enddef

